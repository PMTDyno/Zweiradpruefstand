package gui;

import data.Data;
import data.ReadCSV;
import java.awt.Dimension;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import logging.Logger;
import measure.Calculate;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author Levin Messing
 */
public class Gui extends javax.swing.JFrame
{

  private static final Logger LOG = Logger.getLogger(Calculate.class.getName());
  private static final Logger LOGP = Logger.getParentLogger();
  private static final java.util.logging.Level DEBUGLEVEL = java.util.logging.Level.ALL;
  private final Data data = Data.getInstance();
  private File file = null;
  

  Diagram diagramPower;
  XYSeries seriesPower = new XYSeries("Power Final");
  XYSeriesCollection datasetPower = new XYSeriesCollection(seriesPower);

  Diagram diagramTorque;
  XYSeries seriesTorque = new XYSeries("Torque Final");
  XYSeriesCollection datasetTorque = new XYSeriesCollection(seriesTorque);

  Diagram diagramTrq;
  XYSeries seriesTrq = new XYSeries("Torque");
  XYSeriesCollection datasetTrq = new XYSeriesCollection(seriesTrq);

  Diagram diagramTrqNoFilter;
  XYSeries seriesTrqNoFilter = new XYSeries("Torque No Filter");
  XYSeriesCollection datasetTrqNoFilter = new XYSeriesCollection(seriesTrqNoFilter);

  Diagram diagramOmega;
  XYSeries seriesOmega = new XYSeries("Omega");
  XYSeriesCollection datasetOmega = new XYSeriesCollection(seriesOmega);

  Diagram diagramOmegaNoFilter;
  XYSeries seriesOmegaNoFilter = new XYSeries("Omega No Filter");
  XYSeriesCollection datasetOmegaNoFilter = new XYSeriesCollection(seriesOmegaNoFilter);

  Diagram diagramAlpha;
  XYSeries seriesAlpha = new XYSeries("Alpha");
  XYSeriesCollection datasetAlpha = new XYSeriesCollection(seriesAlpha);

  Diagram diagramAlphaNoFilter;
  XYSeries seriesAlphaNoFilter = new XYSeries("Alpha No Filter");
  XYSeriesCollection datasetAlphaNoFilter = new XYSeriesCollection(seriesAlphaNoFilter);

  Diagram diagramRpm;
  XYSeries seriesRpm = new XYSeries("Rpm");
  XYSeriesCollection datasetRpm = new XYSeriesCollection(seriesRpm);

  Diagram diagramRpmNoFilter;
  XYSeries seriesRpmNoFilter = new XYSeries("Rpm No Filter");
  XYSeriesCollection datasetRpmNoFilter = new XYSeriesCollection(seriesRpmNoFilter);

  /**
   * Creates new form Gui
   */
  public Gui()
  {
    initComponents();

    setSize(new Dimension(1500, 900));

    createCharts();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanToolbar = new javax.swing.JPanel();
    jPanButtons = new javax.swing.JPanel();
    jButSetFile = new javax.swing.JButton();
    jButCalc = new javax.swing.JButton();
    jPanel1 = new javax.swing.JPanel();
    jLabelSmoothing = new javax.swing.JLabel();
    jSpinnerSmoothing = new javax.swing.JSpinner();
    jLabelOrder = new javax.swing.JLabel();
    jSpinnerOrder = new javax.swing.JSpinner();
    jButSetFilter = new javax.swing.JButton();
    jPanCenter = new javax.swing.JPanel();
    jTabbedPane = new javax.swing.JTabbedPane();
    jPanResults = new javax.swing.JPanel();
    jPanPowerChart = new javax.swing.JPanel();
    jPanTorqueChart = new javax.swing.JPanel();
    jPanTorque = new javax.swing.JPanel();
    jPanTrqNoFilterChart = new javax.swing.JPanel();
    jPanTrqChart = new javax.swing.JPanel();
    jPanOmega = new javax.swing.JPanel();
    jPanOmegaNoFilterChart = new javax.swing.JPanel();
    jPanOmegaChart = new javax.swing.JPanel();
    jPanAlpha = new javax.swing.JPanel();
    jPanAlphaNoFilterChart = new javax.swing.JPanel();
    jPanAlphaChart = new javax.swing.JPanel();
    jPanRpm = new javax.swing.JPanel();
    jPanRpmNoFilterChart = new javax.swing.JPanel();
    jPanRpmChart = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jPanToolbar.setLayout(new java.awt.GridBagLayout());

    jButSetFile.setText("Set File");
    jButSetFile.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButSetFileActionPerformed(evt);
      }
    });
    jPanButtons.add(jButSetFile);

    jButCalc.setText("Calculate");
    jButCalc.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButCalcActionPerformed(evt);
      }
    });
    jPanButtons.add(jButCalc);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    jPanToolbar.add(jPanButtons, gridBagConstraints);

    jLabelSmoothing.setText("Smoothing");
    jPanel1.add(jLabelSmoothing);

    jSpinnerSmoothing.setModel(new javax.swing.SpinnerNumberModel(0.1d, 0.0d, null, 0.1d));
    jSpinnerSmoothing.setPreferredSize(new java.awt.Dimension(50, 20));
    jPanel1.add(jSpinnerSmoothing);

    jLabelOrder.setText("Order");
    jPanel1.add(jLabelOrder);

    jSpinnerOrder.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
    jSpinnerOrder.setPreferredSize(new java.awt.Dimension(50, 20));
    jPanel1.add(jSpinnerOrder);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
    jPanToolbar.add(jPanel1, gridBagConstraints);

    jButSetFilter.setText("Set Results Filter");
    jButSetFilter.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButSetFilterActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    jPanToolbar.add(jButSetFilter, gridBagConstraints);

    getContentPane().add(jPanToolbar, java.awt.BorderLayout.NORTH);

    jPanCenter.setLayout(new java.awt.GridLayout(1, 0));

    jTabbedPane.addChangeListener(new javax.swing.event.ChangeListener()
    {
      public void stateChanged(javax.swing.event.ChangeEvent evt)
      {
        jTabbedPaneStateChanged(evt);
      }
    });
    jTabbedPane.addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        jTabbedPaneComponentShown(evt);
      }
    });

    jPanResults.addFocusListener(new java.awt.event.FocusAdapter()
    {
      public void focusGained(java.awt.event.FocusEvent evt)
      {
        jPanResultsFocusGained(evt);
      }
    });
    jPanResults.setLayout(new java.awt.GridLayout(1, 0));

    jPanPowerChart.setLayout(new java.awt.GridLayout(1, 0));
    jPanResults.add(jPanPowerChart);

    jPanTorqueChart.setLayout(new java.awt.GridLayout(1, 0));
    jPanResults.add(jPanTorqueChart);

    jTabbedPane.addTab("Results", jPanResults);

    jPanTorque.setLayout(new java.awt.GridLayout(1, 0));

    jPanTrqNoFilterChart.setLayout(new java.awt.GridLayout(1, 0));
    jPanTorque.add(jPanTrqNoFilterChart);

    jPanTrqChart.setLayout(new java.awt.GridLayout(1, 0));
    jPanTorque.add(jPanTrqChart);

    jTabbedPane.addTab("Torque", jPanTorque);

    jPanOmega.setLayout(new java.awt.GridLayout(1, 0));

    jPanOmegaNoFilterChart.setLayout(new java.awt.GridLayout());
    jPanOmega.add(jPanOmegaNoFilterChart);

    jPanOmegaChart.setLayout(new java.awt.GridLayout());
    jPanOmega.add(jPanOmegaChart);

    jTabbedPane.addTab("Omega", jPanOmega);

    jPanAlpha.setLayout(new java.awt.GridLayout(1, 0));

    jPanAlphaNoFilterChart.setLayout(new java.awt.GridLayout());
    jPanAlpha.add(jPanAlphaNoFilterChart);

    jPanAlphaChart.setLayout(new java.awt.GridLayout());
    jPanAlpha.add(jPanAlphaChart);

    jTabbedPane.addTab("Alpha", jPanAlpha);

    jPanRpm.setLayout(new java.awt.GridLayout());

    jPanRpmNoFilterChart.setLayout(new java.awt.GridLayout());
    jPanRpm.add(jPanRpmNoFilterChart);

    jPanRpmChart.setLayout(new java.awt.GridLayout());
    jPanRpm.add(jPanRpmChart);

    jTabbedPane.addTab("Rpm", jPanRpm);

    jPanCenter.add(jTabbedPane);

    getContentPane().add(jPanCenter, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jButSetFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButSetFileActionPerformed
  {//GEN-HEADEREND:event_jButSetFileActionPerformed
    setFile();
  }//GEN-LAST:event_jButSetFileActionPerformed

  private void jButCalcActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButCalcActionPerformed
  {//GEN-HEADEREND:event_jButCalcActionPerformed
    calc();
  }//GEN-LAST:event_jButCalcActionPerformed

  private void jPanResultsFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_jPanResultsFocusGained
  {//GEN-HEADEREND:event_jPanResultsFocusGained

  }//GEN-LAST:event_jPanResultsFocusGained

  private void jTabbedPaneComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jTabbedPaneComponentShown
  {//GEN-HEADEREND:event_jTabbedPaneComponentShown

  }//GEN-LAST:event_jTabbedPaneComponentShown

  private void jTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jTabbedPaneStateChanged
  {//GEN-HEADEREND:event_jTabbedPaneStateChanged

    switch (jTabbedPane.getSelectedIndex())
    {
      case 0:

      case 1:
        jButSetFilter.setText("Set Torque Filter");
        jSpinnerSmoothing.setValue(data.getFilterTrqSmoothing());
        jSpinnerOrder.setValue(data.getFilterTrqOrder());
        jSpinnerSmoothing.setEnabled(true);
        jSpinnerOrder.setEnabled(true);
        jButSetFilter.setEnabled(true);
        break;
      case 2:
        jButSetFilter.setText("Set Omega Filter");
        jSpinnerSmoothing.setValue(data.getFilterOmegaSmoothing());
        jSpinnerOrder.setValue(data.getFilterOmegaOrder());
        jSpinnerSmoothing.setEnabled(true);
        jSpinnerOrder.setEnabled(true);
        jButSetFilter.setEnabled(true);
        break;
      case 3:
        jButSetFilter.setText("Set Alpha Filter");
        jSpinnerSmoothing.setValue(data.getFilterAlphaSmoothing());
        jSpinnerOrder.setValue(data.getFilterAlphaOrder());
        jSpinnerSmoothing.setEnabled(true);
        jSpinnerOrder.setEnabled(true);
        jButSetFilter.setEnabled(true);
        break;
      case 4:
        jButSetFilter.setText("Set Rpm Filter");
        jSpinnerSmoothing.setValue(data.getFilterRpmSmoothing());
        jSpinnerOrder.setValue(data.getFilterRpmOrder());
        jSpinnerSmoothing.setEnabled(true);
        jSpinnerOrder.setEnabled(true);
        jButSetFilter.setEnabled(true);
        break;
      default:
        LOG.severe("SWITCH CASE ERROR");
    }


  }//GEN-LAST:event_jTabbedPaneStateChanged

  private void jButSetFilterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButSetFilterActionPerformed
  {//GEN-HEADEREND:event_jButSetFilterActionPerformed

    switch (jTabbedPane.getSelectedIndex())
    {
      case 0:

      case 1:
        data.setFilterTrqSmoothing((double) jSpinnerSmoothing.getValue());
        data.setFilterTrqOrder((int) jSpinnerOrder.getValue());
        break;
      case 2:
        data.setFilterOmegaSmoothing((double) jSpinnerSmoothing.getValue());
        data.setFilterOmegaOrder((int) jSpinnerOrder.getValue());
        break;
      case 3:
        data.setFilterAlphaSmoothing((double) jSpinnerSmoothing.getValue());
        data.setFilterAlphaOrder((int) jSpinnerOrder.getValue());
        break;
      case 4:
        data.setFilterRpmSmoothing((double) jSpinnerSmoothing.getValue());
        data.setFilterRpmOrder((int) jSpinnerOrder.getValue());
        break;
      default:
        LOG.severe("SWITCH CASE ERROR");
    }

    calc();
  }//GEN-LAST:event_jButSetFilterActionPerformed

  private void createCharts()
  {

    diagramPower = new Diagram("Power", "RPM", "Power", datasetPower);
    jPanPowerChart.add(diagramPower.getChartPanel());

    diagramTorque = new Diagram("Torque", "RPM", "Torque", datasetTorque);
    jPanTorqueChart.add(diagramTorque.getChartPanel());

    diagramTrq = new Diagram("Torque / Time", "Time", "Torque", datasetTrq);
    jPanTrqChart.add(diagramTrq.getChartPanel());

    diagramTrqNoFilter = new Diagram("Torque / Time (No Filter)", "Time", "Torque", datasetTrqNoFilter);
    jPanTrqNoFilterChart.add(diagramTrqNoFilter.getChartPanel());

    diagramOmega = new Diagram("Omega / Time", "Time", "Omega", datasetOmega);
    jPanOmegaChart.add(diagramOmega.getChartPanel());

    diagramOmegaNoFilter = new Diagram("Omega / Time (No Filter)", "Time", "Omega", datasetOmegaNoFilter);
    jPanOmegaNoFilterChart.add(diagramOmegaNoFilter.getChartPanel());

    diagramAlpha = new Diagram("Alpha / Time", "Time", "Alpha", datasetAlpha);
    jPanAlphaChart.add(diagramAlpha.getChartPanel());

    diagramAlphaNoFilter = new Diagram("Alpha / Time (No Filter)", "Time", "Alpha", datasetAlphaNoFilter);
    jPanAlphaNoFilterChart.add(diagramAlphaNoFilter.getChartPanel());

    diagramRpm = new Diagram("Rpm / Time", "Time", "Rpm", datasetRpm);
    jPanRpmChart.add(diagramRpm.getChartPanel());

    diagramRpmNoFilter = new Diagram("Rpm / Time (No Filter)", "Time", "Rpm", datasetRpmNoFilter);
    jPanRpmNoFilterChart.add(diagramRpmNoFilter.getChartPanel());
  }

  private void calc()
  {

    if(file == null)
      setFile();

    
    Calculate calc = new Calculate();
    
    XYSeries tmp[] = calc.calc();
    seriesPower = tmp[0];
    seriesTorque = tmp[1];

    seriesTrq = calc.getSeriesTrq();
    seriesTrqNoFilter = calc.getSeriesTrqNoFilter();

    seriesOmega = calc.getSeriesOmega();
    seriesOmegaNoFilter = calc.getSeriesOmegaNoFilter();

    seriesAlpha = calc.getSeriesAlpha();
    seriesAlphaNoFilter = calc.getSeriesAlphaNoFilter();

    seriesRpm = calc.getSeriesRpm();
    seriesRpmNoFilter = calc.getSeriesRpmNoFilter();

    refreshDiagrams();
    LOG.info("DONE");

  }

  private void refreshDiagrams()
  {
    diagramPower.updateDataset(seriesPower);
    diagramTorque.updateDataset(seriesTorque);

    diagramTrq.updateDataset(seriesTrq);
    diagramTrqNoFilter.updateDataset(seriesTrqNoFilter);

    diagramOmega.updateDataset(seriesOmega);
    diagramOmegaNoFilter.updateDataset(seriesOmegaNoFilter);

    diagramAlpha.updateDataset(seriesAlpha);
    diagramAlphaNoFilter.updateDataset(seriesAlphaNoFilter);

    diagramRpm.updateDataset(seriesRpm);
    diagramRpmNoFilter.updateDataset(seriesRpmNoFilter);

    setRanges();
  }

  private void setRanges()
  {
    diagramTrq.getChartPanel().getChart().getXYPlot().getRangeAxis().setRange(
            diagramTrqNoFilter.getChartPanel().getChart().getXYPlot().getRangeAxis().getRange().getLowerBound(),
            diagramTrqNoFilter.getChartPanel().getChart().getXYPlot().getRangeAxis().getRange().getUpperBound());

    diagramOmega.getChartPanel().getChart().getXYPlot().getRangeAxis().setRange(
            diagramOmegaNoFilter.getChartPanel().getChart().getXYPlot().getRangeAxis().getRange().getLowerBound(),
            diagramOmegaNoFilter.getChartPanel().getChart().getXYPlot().getRangeAxis().getRange().getUpperBound());

    diagramAlpha.getChartPanel().getChart().getXYPlot().getRangeAxis().setRange(
            diagramAlphaNoFilter.getChartPanel().getChart().getXYPlot().getRangeAxis().getRange().getLowerBound(),
            diagramAlphaNoFilter.getChartPanel().getChart().getXYPlot().getRangeAxis().getRange().getUpperBound());

    diagramRpm.getChartPanel().getChart().getXYPlot().getRangeAxis().setRange(
            diagramRpmNoFilter.getChartPanel().getChart().getXYPlot().getRangeAxis().getRange().getLowerBound(),
            diagramRpmNoFilter.getChartPanel().getChart().getXYPlot().getRangeAxis().getRange().getUpperBound());

  }

  private void setFile()
  {
    try
    {

      JFileChooser chooser = new JFileChooser();
      FileNameExtensionFilter filter = new FileNameExtensionFilter(
              "Comma Seperated Values (*.csv)", "csv");
      chooser.setFileFilter(filter);

      int rv = chooser.showOpenDialog(this);
      if(rv == JFileChooser.APPROVE_OPTION)
      {
        file = chooser.getSelectedFile();

        //ReadCSV fr = new ReadCSV("/home/levin/Desktop/measure.csv");
        //ReadCSV fr = new ReadCSV("/home/robert/Schreibtisch/measure.csv");
        ReadCSV fr = new ReadCSV(file);

        data.setMeasureList(fr.read());

      }
    }
    catch (NumberFormatException ex)
    {
//      ex.printStackTrace(System.err);
      LOG.severe("Wrong number format!" + ex.getMessage(), ex);
      showErrorMessage("Fehler", "Datei hat falsches Format. \n"
                       + "Es dürfen keine Kommazahlen angegeben werden!");
      file = null;
    }
    catch (Exception ex)
    {
      //ex.printStackTrace(System.err);
      LOG.severe("Error: %s", ex.getMessage());
      showErrorMessage("Error", ex.getMessage());
      file = null;
    }

    if(file != null)
      LOG.info("Set File to: %s", file.getAbsolutePath());

  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
//      for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
//      {
//        if("Nimbus".equals(info.getName()))
//        {
//          javax.swing.UIManager.setLookAndFeel(info.getClassName());
//          
//          break;
//        }
//      }

      javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    LOGP.addHandler(new logging.LogOutputStreamHandler(System.out));
    LOG.setLevel(DEBUGLEVEL);
    LOGP.setLevel(DEBUGLEVEL);

    java.awt.EventQueue.invokeLater(new Runnable()
    {

      public void run()
      {
        new Gui().setVisible(true);
      }

    });
  }

  /**
   * Shows an error message relative to this
   *
   * @param title   The Title of the Frame
   * @param message The displayed message
   */
  private void showErrorMessage(String title, String message)
  {
    JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButCalc;
  private javax.swing.JButton jButSetFile;
  private javax.swing.JButton jButSetFilter;
  private javax.swing.JLabel jLabelOrder;
  private javax.swing.JLabel jLabelSmoothing;
  private javax.swing.JPanel jPanAlpha;
  private javax.swing.JPanel jPanAlphaChart;
  private javax.swing.JPanel jPanAlphaNoFilterChart;
  private javax.swing.JPanel jPanButtons;
  private javax.swing.JPanel jPanCenter;
  private javax.swing.JPanel jPanOmega;
  private javax.swing.JPanel jPanOmegaChart;
  private javax.swing.JPanel jPanOmegaNoFilterChart;
  private javax.swing.JPanel jPanPowerChart;
  private javax.swing.JPanel jPanResults;
  private javax.swing.JPanel jPanRpm;
  private javax.swing.JPanel jPanRpmChart;
  private javax.swing.JPanel jPanRpmNoFilterChart;
  private javax.swing.JPanel jPanToolbar;
  private javax.swing.JPanel jPanTorque;
  private javax.swing.JPanel jPanTorqueChart;
  private javax.swing.JPanel jPanTrqChart;
  private javax.swing.JPanel jPanTrqNoFilterChart;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JSpinner jSpinnerOrder;
  private javax.swing.JSpinner jSpinnerSmoothing;
  private javax.swing.JTabbedPane jTabbedPane;
  // End of variables declaration//GEN-END:variables
}
