package gui;

import data.Data;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.LayoutManager;
import java.util.List;
import java.util.logging.Level;
import javax.swing.JInternalFrame;
import logging.Logger;
import javax.swing.JOptionPane;
import measure.Communication;
import measure.MeasurementWorker;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialPointer;
import org.jfree.chart.plot.dial.DialTextAnnotation;
import org.jfree.chart.plot.dial.StandardDialFrame;
import org.jfree.chart.plot.dial.StandardDialScale;
import org.jfree.data.general.DefaultValueDataset;

/**
 *
 * @author Messing Levin (meslem12@htl-kaindorf.ac.at)
 */
public class MeasureDialog extends javax.swing.JDialog
{

  private static final Logger LOG = Logger.getLogger(MeasureDialog.class.getName());

  private final Data data = Data.getInstance();
  private final DefaultValueDataset kmh = new DefaultValueDataset(0);
  private final DefaultValueDataset rpm = new DefaultValueDataset(0);

  private Gui gui;
  private Measure worker;

  /**
   * Creates new form LoadingFrame
   *
   * @param parent
   * @param modal
   */
  public MeasureDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);

    LOG.setLevel(Level.ALL);
    setTitle("Messung läuft...");
    setResizable(false);
    setMinimumSize(new Dimension(620, 450));

    initComponents();
    createDial(kmh, "km/h", jFrameSpeed, 0, 150, 10);

    if(data.isMeasRPM())
    {

      createDial(rpm, "U/min x 1000", jFrameRpm, 0, 13, 1);
    }
    else
    {
      jPanDial.remove(jFrameRpm);
      //setMinimumSize(new Dimension(310, 400));
      //setSize(new Dimension(310, 400));

    }

  }

  public void init(Gui gui, Communication com)
  {
    this.gui = gui;
    worker = new Measure(com);
    com.setMeasureDialog(this);
    setLocationRelativeTo(gui);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPanMain = new javax.swing.JPanel();
    jPanStatus = new javax.swing.JPanel();
    jPanelStatusText = new javax.swing.JPanel();
    jLabelCount = new javax.swing.JLabel();
    jProgressBar = new javax.swing.JProgressBar();
    jLabel = new javax.swing.JLabel();
    jLabelStatus = new javax.swing.JLabel();
    jPanelStatusColor = new javax.swing.JPanel();
    jPanDial = new javax.swing.JPanel();
    jFrameSpeed = new javax.swing.JInternalFrame();
    jFrameRpm = new javax.swing.JInternalFrame();
    jPanButtons = new javax.swing.JPanel();
    jbutCancel = new javax.swing.JButton();
    jbutFinish = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setResizable(false);

    jPanMain.setLayout(new java.awt.BorderLayout());

    jPanStatus.setLayout(new java.awt.GridLayout(2, 0));

    jLabelCount.setText("Anzahl der Messpunkte: ");
    jPanelStatusText.add(jLabelCount);

    jProgressBar.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
    jProgressBar.setToolTipText("Anzahl der Messpunkte");
    jProgressBar.setIndeterminate(true);
    jProgressBar.setPreferredSize(new java.awt.Dimension(150, 25));
    jProgressBar.setString("0");
    jProgressBar.setStringPainted(true);
    jPanelStatusText.add(jProgressBar);

    jLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jLabel.setText("Status:");
    jLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
    jPanelStatusText.add(jLabel);

    jLabelStatus.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jLabelStatus.setText("HOCHSCHALTEN");
    jPanelStatusText.add(jLabelStatus);

    jPanStatus.add(jPanelStatusText);

    jPanelStatusColor.setLayout(new java.awt.GridLayout());
    jPanStatus.add(jPanelStatusColor);

    jPanMain.add(jPanStatus, java.awt.BorderLayout.PAGE_START);

    jPanDial.setLayout(new java.awt.GridLayout(1, 1));

    jFrameSpeed.setVisible(true);
    jFrameSpeed.getContentPane().setLayout(new java.awt.GridLayout(1, 1));
    jPanDial.add(jFrameSpeed);

    jFrameRpm.setVisible(true);
    jFrameRpm.getContentPane().setLayout(new java.awt.GridLayout(1, 0));
    jPanDial.add(jFrameRpm);

    jPanMain.add(jPanDial, java.awt.BorderLayout.CENTER);

    getContentPane().add(jPanMain, java.awt.BorderLayout.CENTER);

    jbutCancel.setText("Abbrechen");
    jbutCancel.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbutCancelActionPerformed(evt);
      }
    });
    jPanButtons.add(jbutCancel);

    jbutFinish.setText("Messung fertigstellen");
    jbutFinish.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jbutFinish.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jbutFinishActionPerformed(evt);
      }
    });
    jPanButtons.add(jbutFinish);

    getContentPane().add(jPanButtons, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jbutCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbutCancelActionPerformed
  {//GEN-HEADEREND:event_jbutCancelActionPerformed
    abort();
  }//GEN-LAST:event_jbutCancelActionPerformed

  private void jbutFinishActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbutFinishActionPerformed
  {//GEN-HEADEREND:event_jbutFinishActionPerformed
    finish();
  }//GEN-LAST:event_jbutFinishActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the system look and feel */
    try
    {
      javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
    }
    catch (ClassNotFoundException
           | InstantiationException
           | IllegalAccessException
           | javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(MeasureDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(() ->
    {
      MeasureDialog dialog = new MeasureDialog(new javax.swing.JFrame(), true);
      dialog.addWindowListener(new java.awt.event.WindowAdapter()
      {

        @Override
        public void windowClosing(java.awt.event.WindowEvent e)
        {
          System.exit(0);
        }

      });

      new Thread(
              new Runnable()
      {

        @Override
        public void run()
        {
          while(true)
          {
            try
            {
              dialog.setStatus("HOCHSCHALTEN");
              Thread.sleep(2000);
              dialog.setStatus("WARTEN");
              Thread.sleep(2000);
              dialog.setStatus("BEREIT");
              Thread.sleep(2000);
              dialog.setStatus("LÄUFT");
              Thread.sleep(2000);
            }
            catch (InterruptedException ex)
            {
              java.util.logging.Logger.getLogger(MeasureDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
          }
        }

      }).start();
      dialog.setVisible(true);

    });

  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JInternalFrame jFrameRpm;
  private javax.swing.JInternalFrame jFrameSpeed;
  private javax.swing.JLabel jLabel;
  private javax.swing.JLabel jLabelCount;
  private javax.swing.JLabel jLabelStatus;
  private javax.swing.JPanel jPanButtons;
  private javax.swing.JPanel jPanDial;
  private javax.swing.JPanel jPanMain;
  private javax.swing.JPanel jPanStatus;
  private javax.swing.JPanel jPanelStatusColor;
  private javax.swing.JPanel jPanelStatusText;
  private javax.swing.JProgressBar jProgressBar;
  private javax.swing.JButton jbutCancel;
  private javax.swing.JButton jbutFinish;
  // End of variables declaration//GEN-END:variables

  private void abort()
  {
    if(JOptionPane.showConfirmDialog(this, "Sind Sie sicher?", "Messung abbrechen", JOptionPane.YES_NO_OPTION) == 0)
    {
      worker.cancel(true);
      close();
    }
  }

  /**
   *
   * @param status HOCHSCHALTEN, WARTEN, BEREIT, LÄUFT
   */
  public void setStatus(String status)
  {
    switch (status)
    {
      case "HOCHSCHALTEN":
        jPanelStatusColor.setBackground(Color.RED);
        jLabelStatus.setText(status + "  " + (data.isMeasRPM() ? data.getStartRPM() : data.getStartKMH()));
        break;
      case "WARTEN":
        jPanelStatusColor.setBackground(Color.ORANGE);
        jLabelStatus.setText(status + "  "
                + (data.isMeasRPM()
                ? data.getIdleRPM() + " ±" + data.getHysteresisRPM()
                : data.getHysteresisKMH() + " ±" + data.getHysteresisKMH())
        );
        break;
      case "BEREIT":
        jPanelStatusColor.setBackground(new Color(30, 200, 30));
        jLabelStatus.setText(status + "  " + (data.isMeasRPM() ? data.getStartRPM() : data.getStartKMH()));
        break;

      default:
        jPanelStatusColor.setBackground(jPanelStatusText.getBackground());
        jLabelStatus.setText(status);
    }

    LOG.fine("Set status: " + status);
  }

  private void setLabelStatus(String status)
  {

  }

  private void finish()
  {
    worker.stop();
    close();
  }

  private void close()
  {
    super.dispose();
  }

  private void createDial(DefaultValueDataset set, String title, JInternalFrame frame, int min, int max, int tick)
  {

    DialPlot plot = new DialPlot(set);
    plot.setDialFrame(new StandardDialFrame());
    plot.addLayer(new DialPointer.Pointer());
    DialTextAnnotation annotation = new DialTextAnnotation(title);
    annotation.setFont(new Font(null, Font.BOLD, 17));
    plot.addLayer(annotation);

    StandardDialScale scale = new StandardDialScale(min, max,
                                                    -120, -300, tick, 4);

    scale.setTickRadius(0.88);
    scale.setTickLabelOffset(0.20);
    plot.addScale(0, scale);

    frame.setUI(null);
    frame.add(new ChartPanel(new JFreeChart(plot)));
    frame.pack();
    frame.setSize(500, 500);
  }

  @Override
  public void dispose()
  {
    if(JOptionPane.showConfirmDialog(this, "Sind Sie sicher?", "Messung abbrechen", JOptionPane.YES_NO_OPTION) == 0)
    {
      worker.cancel(true);
      close();
    }
  }

  public void startMeasurement()
  {
    worker.execute();
    jProgressBar.setIndeterminate(true);
    jbutFinish.requestFocusInWindow();

  }

  /**
   * MeasurementWorker
   */
  private class Measure extends MeasurementWorker
  {

    private Measure(Communication com)
    {
      super(com);
    }

    @Override
    protected void process(List<Double> chunks)
    {

      jProgressBar.setString(String.valueOf(chunks.get(0).intValue()));
      kmh.setValue(chunks.get(1));
      //LOG.finest(String.format("Dial set to %.2fkm/h", chunks.get(1)));

      if(data.isMeasRPM())
      {
        rpm.setValue(chunks.get(2) / 1000);
        //LOG.finest(String.format("Dial set to %.2frpm", chunks.get(2)));
      }
    }

    @Override
    protected void done()
    {
      gui.done(worker);
      close();
    }

  }

}
