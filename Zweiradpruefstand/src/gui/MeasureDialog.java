package gui;

import data.Data;
import java.awt.Dimension;
import java.awt.Font;
import java.util.List;
import java.util.logging.Level;
import logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.ProgressBarUI;
import javax.swing.plaf.basic.BasicProgressBarUI;
import measure.Communication;
import measure.MeasurementWorker;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialPointer;
import org.jfree.chart.plot.dial.DialTextAnnotation;
import org.jfree.chart.plot.dial.StandardDialFrame;
import org.jfree.chart.plot.dial.StandardDialScale;
import org.jfree.data.general.DefaultValueDataset;

/**
 *
 * @author Messing Levin (meslem12@htl-kaindorf.ac.at)
 */
public class MeasureDialog extends javax.swing.JDialog
{

  private static final Logger LOG = Logger.getLogger(MeasureDialog.class.getName());

  private final Data data = Data.getInstance();
  private Gui gui;
  private Measure worker;
  private DefaultValueDataset dataset;

  /**
   * Creates new form LoadingFrame
   *
   * @param parent
   * @param modal
   */
  public MeasureDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);

    LOG.setLevel(Level.ALL);
    setTitle("Messung lÃ¤uft...");
    setResizable(false);
    setMinimumSize(new Dimension(310, 400));

    initComponents();

    dataset = new DefaultValueDataset(0);

    DialPlot plot = new DialPlot(dataset);
    plot.setDialFrame(new StandardDialFrame());
    plot.addLayer(new DialPointer.Pointer());
    DialTextAnnotation annotation = new DialTextAnnotation("km/h");
    annotation.setFont(new Font(null, Font.BOLD, 20));
    plot.addLayer(annotation);
    
    

    StandardDialScale scale = new StandardDialScale(0, 100,
                                                    -120, -300, 10, 4);
    
    scale.setTickRadius(0.88);
    scale.setTickLabelOffset(0.20);
    plot.addScale(0, scale);

    jFrameChart.setUI(null);
    jFrameChart.add(new ChartPanel(new JFreeChart(plot)));
    jFrameChart.pack();
    jFrameChart.setSize(1000, 1000);

//    new Thread(() ->
//    {
//      int time = 10;
//      
//      try
//      {
//        double value = 0;
//        while(true)
//        {
//          while(true)
//          {
//            Thread.sleep(time);
//            dataset.setValue(value);
//            if(value > 99)
//              break;
//            
//            value+=1;
//          }
//          while(true)
//          {
//            Thread.sleep(time);
//            dataset.setValue(value);
//            if(value < 1)
//              break;
//            
//            value-=1;
//          }
//        }
//        
//      }
//      catch (InterruptedException ex)
//      {
//        java.util.logging.Logger.getLogger(MeasureDialog.class.getName()).log(Level.SEVERE, null, ex);
//      }
//    }).start();

  }

  public void init(Gui gui, Communication com)
  {
    this.gui = gui;
    worker = new Measure(com);
    setLocationRelativeTo(gui);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPanelButtons = new javax.swing.JPanel();
    jButton1 = new javax.swing.JButton();
    jButton3 = new javax.swing.JButton();
    jPanelInfo = new javax.swing.JPanel();
    jPanelDial = new javax.swing.JPanel();
    jFrameChart = new javax.swing.JInternalFrame();
    jPanelStatus = new javax.swing.JPanel();
    jLabel = new javax.swing.JLabel();
    jProgressBar = new javax.swing.JProgressBar();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setResizable(false);

    jButton1.setText("Abbrechen");
    jButton1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton1ActionPerformed(evt);
      }
    });
    jPanelButtons.add(jButton1);

    jButton3.setText("Messung fertigstellen");
    jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButton3.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton3ActionPerformed(evt);
      }
    });
    jPanelButtons.add(jButton3);

    getContentPane().add(jPanelButtons, java.awt.BorderLayout.SOUTH);

    jPanelInfo.setLayout(new java.awt.BorderLayout());

    jPanelDial.setLayout(new java.awt.GridLayout(1, 0));

    jFrameChart.setVisible(true);
    jPanelDial.add(jFrameChart);

    jPanelInfo.add(jPanelDial, java.awt.BorderLayout.CENTER);

    jLabel.setText("Anzahl der Messpunkte: ");
    jPanelStatus.add(jLabel);

    jProgressBar.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
    jProgressBar.setToolTipText("Anzahl der Messpunkte");
    jProgressBar.setIndeterminate(true);
    jProgressBar.setPreferredSize(new java.awt.Dimension(150, 25));
    jProgressBar.setString("0");
    jProgressBar.setStringPainted(true);
    jPanelStatus.add(jProgressBar);

    jPanelInfo.add(jPanelStatus, java.awt.BorderLayout.PAGE_START);

    getContentPane().add(jPanelInfo, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
  {//GEN-HEADEREND:event_jButton1ActionPerformed
    abort();
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
  {//GEN-HEADEREND:event_jButton3ActionPerformed
    finish();
  }//GEN-LAST:event_jButton3ActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the system look and feel */
    try
    {
      javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
    }
    catch (ClassNotFoundException
           | InstantiationException
           | IllegalAccessException
           | javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(MeasureDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(() ->
    {
      MeasureDialog dialog = new MeasureDialog(new javax.swing.JFrame(), true);
      dialog.addWindowListener(new java.awt.event.WindowAdapter()
      {

        @Override
        public void windowClosing(java.awt.event.WindowEvent e)
        {
          System.exit(0);
        }

      });

      dialog.setVisible(true);
    });

  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton3;
  private javax.swing.JInternalFrame jFrameChart;
  private javax.swing.JLabel jLabel;
  private javax.swing.JPanel jPanelButtons;
  private javax.swing.JPanel jPanelDial;
  private javax.swing.JPanel jPanelInfo;
  private javax.swing.JPanel jPanelStatus;
  private javax.swing.JProgressBar jProgressBar;
  // End of variables declaration//GEN-END:variables

  private void abort()
  {
    if(JOptionPane.showConfirmDialog(this, "Sind Sie sicher?", "Messung abbrechen", JOptionPane.YES_NO_OPTION) == 0)
    {
      worker.cancel(true);
      close();
    }
  }

  private void finish()
  {
    worker.stop();
    close();
  }

  private void close()
  {
    super.dispose();
  }

  @Override
  public void dispose()
  {
    if(JOptionPane.showConfirmDialog(this, "Sind Sie sicher?", "Messung abbrechen", JOptionPane.YES_NO_OPTION) == 0)
    {
      worker.cancel(true);
      close();
    }
  }

  public void startMeasurement()
  {
    worker.execute();
    jProgressBar.setIndeterminate(true);
  }

  /**
   * MeasurementWorker
   */
  private class Measure extends MeasurementWorker
  {

    private Measure(Communication com)
    {
      super(com);
    }

    @Override
    protected void process(List<Double> chunks)
    {
      
//      jLabelStatus.setText(String.valueOf(chunks.get(0).intValue()));
      jProgressBar.setString(String.valueOf(chunks.get(0).intValue()));
      dataset.setValue(chunks.get(1));
    }

    @Override
    protected void done()
    {
      gui.done(worker);
      close();
    }

  }

}
