package gui;

import data.Data;
import java.awt.Dimension;
import java.util.logging.Level;
import logging.Logger;
import javax.swing.JOptionPane;

/**
 * Displays a Dialog to enter several settings
 *
 * @author Levin Messing (meslem12@htl-kaindorf.ac.at)
 */
public class ProgSetDialog extends javax.swing.JDialog
{

  private final Data data = Data.getInstance();
  private static final Logger LOG = Logger.getLogger(ProgSetDialog.class.getName());

  private boolean settingsChanged = false;
  //PNG RESOLUTION
  private int resIndex = 1; //800x600 standart
  private boolean customRes = false;
  private int customWidth = 800;
  private int customHeight = 600;
  //POWERUNIT
  private boolean powerunitPS = true;
  //CORRECTION
  private double correctionPower = 1.0;
  private double correctionTorque = 1.0;
  private double inertia = 3.7017;
  //COMMUNICATION
  private int periodTimeMs = 40;
  private int startKmh = 10;
  private int idleKmh = 4;
  private int hysteresisKmh = 2;
  private int startRpm = 2000;
  private int idleRpm = 1600;
  private int hysteresisRpm = 200;
  private int hysteresisTime = 3000;

  /**
   * Creates the frame with the given values
   *
   * @param parent The parent Frame
   * @param modal  specifies whether dialog blocks user input to other top-level
   *               windows when shown.
   */
  public ProgSetDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    LOG.setLevel(Level.ALL);
    initComponents();

    setSize(new Dimension(900, 500));

    this.inertia = data.getInertia();

    powerunitPS = data.getPowerunit().equals("PS");
    jButRadioUnitPS.setSelected(powerunitPS);

    this.correctionPower = data.getCorrectionPower();
    this.correctionTorque = data.getCorrectionTorque();
    this.periodTimeMs = data.getPeriodTimeMs();
    this.startRpm = data.getStartRPM();
    this.startKmh = data.getStartKMH();
    this.idleRpm = data.getIdleRPM();
    this.idleKmh = data.getIdleKMH();
    this.hysteresisRpm = data.getHysteresisRPM();
    this.hysteresisKmh = data.getHysteresisKMH();
    this.hysteresisTime = data.getHysteresisTIME();

    switch (data.getPngWidth())
    {
      case 640:
        if(data.getPngHeight() == 480)
        {
          customRes = false;
          resIndex = 0;
        }
        else
          customRes = true;
        break;

      case 800:
        if(data.getPngHeight() == 600)
        {
          customRes = false;
          resIndex = 1;
        }
        else
          customRes = true;
        break;

      case 1280:
        if(data.getPngHeight() == 720)
        {
          customRes = false;
          resIndex = 2;
        }
        else
          customRes = true;
        break;

      case 1920:
        if(data.getPngHeight() == 1080)
        {
          customRes = false;
          resIndex = 3;
        }
        else
          customRes = true;
        break;

      default:
        customRes = true;
        break;
    }

    if(data.getPngWidth() < 400)
      data.setPngWidth(400);

    if(data.getPngHeight() < 200)
      data.setPngHeight(200);

    this.customWidth = data.getPngWidth();
    this.customHeight = data.getPngHeight();

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        resolutionGroup = new javax.swing.ButtonGroup();
        powerunitGroup = new javax.swing.ButtonGroup();
        jPanMain = new javax.swing.JPanel();
        jPanWest = new javax.swing.JPanel();
        jPanPNG = new javax.swing.JPanel();
        jPanPNGButtons = new javax.swing.JPanel();
        jButRadioPng = new javax.swing.JRadioButton();
        jPNGResolutionCombo = new javax.swing.JComboBox();
        jButRadioPngCustom = new javax.swing.JRadioButton();
        jPanPNGCustom = new javax.swing.JPanel();
        jWidth = new javax.swing.JTextField();
        jLabelX = new javax.swing.JLabel();
        jHeight = new javax.swing.JTextField();
        jPanCorrection = new javax.swing.JPanel();
        jPanCorrectionButtons = new javax.swing.JPanel();
        jSpinCorrectPower = new javax.swing.JSpinner();
        jLabelPower = new javax.swing.JLabel();
        jLabelTorque = new javax.swing.JLabel();
        jSpinCorrectTorque = new javax.swing.JSpinner();
        jLabelInertia = new javax.swing.JLabel();
        jTextFieldInertia = new javax.swing.JTextField();
        jLabelInertia2 = new javax.swing.JLabel();
        jPanPower = new javax.swing.JPanel();
        jPanPowerButtons = new javax.swing.JPanel();
        jButRadioUnitPS = new javax.swing.JRadioButton();
        jButRadioUnitkW = new javax.swing.JRadioButton();
        jPanEast = new javax.swing.JPanel();
        jPanSerial = new javax.swing.JPanel();
        jPanSerialButtons = new javax.swing.JPanel();
        jLabelPeriod = new javax.swing.JLabel();
        jSpinPeriod = new javax.swing.JSpinner();
        jLabelPeriod2 = new javax.swing.JLabel();
        jLabelHysteresisTime = new javax.swing.JLabel();
        jSpinHysteresisTime = new javax.swing.JSpinner();
        jLabelHysteresisTime2 = new javax.swing.JLabel();
        jLabelStartKmh = new javax.swing.JLabel();
        jSpinStartKmh = new javax.swing.JSpinner();
        jLabelStartKmh2 = new javax.swing.JLabel();
        jLabelIdleRpm = new javax.swing.JLabel();
        jSpinIdleRpm = new javax.swing.JSpinner();
        jLabelIdleRpm2 = new javax.swing.JLabel();
        jLabelHysteresisRpm = new javax.swing.JLabel();
        jSpinHysteresisRpm = new javax.swing.JSpinner();
        jLabelHysteresisRpm2 = new javax.swing.JLabel();
        jLabelStartRpm = new javax.swing.JLabel();
        jSpinStartRpm = new javax.swing.JSpinner();
        jLabelStartRpm2 = new javax.swing.JLabel();
        jLabelIdleKmh = new javax.swing.JLabel();
        jSpinIdleKmh = new javax.swing.JSpinner();
        jLabelIdleKmh2 = new javax.swing.JLabel();
        jLabelHysteresisKmh = new javax.swing.JLabel();
        jSpinHysteresisKmh = new javax.swing.JSpinner();
        jLabelHysteresisKmh2 = new javax.swing.JLabel();
        jPanButtons = new javax.swing.JPanel();
        jButCancel = new javax.swing.JButton();
        jButConfirm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Programmeinstellungen");
        setLocation(new java.awt.Point(0, 0));
        setLocationByPlatform(true);
        setResizable(false);
        getContentPane().setLayout(new java.awt.BorderLayout());

        jPanMain.setLayout(new java.awt.GridLayout(1, 2));

        jPanWest.setLayout(new java.awt.GridBagLayout());

        jPanPNG.setLayout(new java.awt.GridBagLayout());

        jPanPNGButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)), "PNG Auflösung"));
        jPanPNGButtons.setLayout(new java.awt.GridBagLayout());

        resolutionGroup.add(jButRadioPng);
        jButRadioPng.setSelected(true);
        jButRadioPng.setToolTipText("Vordefinierte Auflösung des Bildes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanPNGButtons.add(jButRadioPng, gridBagConstraints);

        jPNGResolutionCombo.setMaximumRowCount(4);
        jPNGResolutionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "VGA (640x480)", "SVGA (800x600)", "HD720 (1280x720)", "HD1080 (1920x1080)" }));
        jPNGResolutionCombo.setSelectedIndex(1);
        jPNGResolutionCombo.setName(""); // NOI18N
        jPNGResolutionCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jPNGResolutionComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanPNGButtons.add(jPNGResolutionCombo, gridBagConstraints);

        resolutionGroup.add(jButRadioPngCustom);
        jButRadioPngCustom.setToolTipText("Benutzerdefinierte Auflösung");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanPNGButtons.add(jButRadioPngCustom, gridBagConstraints);

        jWidth.setColumns(5);
        jWidth.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jWidth.setText("0000");
        jWidth.setToolTipText("Breite");
        jWidth.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jWidth.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jWidthActionPerformed(evt);
            }
        });
        jPanPNGCustom.add(jWidth);

        jLabelX.setText("x");
        jPanPNGCustom.add(jLabelX);

        jHeight.setColumns(5);
        jHeight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jHeight.setText("0000");
        jHeight.setToolTipText("Höhe");
        jHeight.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jHeightActionPerformed(evt);
            }
        });
        jPanPNGCustom.add(jHeight);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        jPanPNGButtons.add(jPanPNGCustom, gridBagConstraints);

        jPanPNG.add(jPanPNGButtons, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanWest.add(jPanPNG, gridBagConstraints);

        jPanCorrection.setLayout(new java.awt.GridBagLayout());

        jPanCorrectionButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)), "Korrekturfaktoren"));
        jPanCorrectionButtons.setLayout(new java.awt.GridBagLayout());

        jSpinCorrectPower.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.5d, 2.0d, 0.1d));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 3);
        jPanCorrectionButtons.add(jSpinCorrectPower, gridBagConstraints);

        jLabelPower.setText("Leistung");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanCorrectionButtons.add(jLabelPower, gridBagConstraints);

        jLabelTorque.setText("Drehmoment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanCorrectionButtons.add(jLabelTorque, gridBagConstraints);

        jSpinCorrectTorque.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.5d, 2.0d, 0.1d));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 3);
        jPanCorrectionButtons.add(jSpinCorrectTorque, gridBagConstraints);

        jLabelInertia.setText("Trägheitsmoment");
        jLabelInertia.setToolTipText("<html>Trägheitsmoment der Rolle.<br>Standartwert: 3,7017kgm²");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 0);
        jPanCorrectionButtons.add(jLabelInertia, gridBagConstraints);

        jTextFieldInertia.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldInertia.setText("3,7017");
        jTextFieldInertia.setToolTipText("<html>Trägheitsmoment der Rolle.<br>Standartwert: 3,7017kgm²");
        jTextFieldInertia.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextFieldInertiaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 3);
        jPanCorrectionButtons.add(jTextFieldInertia, gridBagConstraints);

        jLabelInertia2.setText("kgm²");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanCorrectionButtons.add(jLabelInertia2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        jPanCorrection.add(jPanCorrectionButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanWest.add(jPanCorrection, gridBagConstraints);

        jPanPower.setLayout(new java.awt.GridBagLayout());

        jPanPowerButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)), "Leistungseinheit"));
        jPanPowerButtons.setLayout(new java.awt.GridBagLayout());

        powerunitGroup.add(jButRadioUnitPS);
        jButRadioUnitPS.setSelected(true);
        jButRadioUnitPS.setText("PS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanPowerButtons.add(jButRadioUnitPS, gridBagConstraints);

        powerunitGroup.add(jButRadioUnitkW);
        jButRadioUnitkW.setText("kW");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanPowerButtons.add(jButRadioUnitkW, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanPower.add(jPanPowerButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanWest.add(jPanPower, gridBagConstraints);

        jPanMain.add(jPanWest);

        jPanEast.setLayout(new java.awt.GridBagLayout());

        jPanSerial.setLayout(new java.awt.GridBagLayout());

        jPanSerialButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)), "Kommunikation"));
        jPanSerialButtons.setLayout(new java.awt.GridBagLayout());

        jLabelPeriod.setText("Zeitintervall");
        jLabelPeriod.setToolTipText("<html>Der Zeitabstand zwischen Messpunkten.<br>Kleinerer Wert bedeutet genauere Messung.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanSerialButtons.add(jLabelPeriod, gridBagConstraints);

        jSpinPeriod.setModel(new javax.swing.SpinnerNumberModel(40, 5, 2000, 1));
        jSpinPeriod.setToolTipText("<html>Der Zeitabstand zwischen Messpunkten.<br>Kleinerer Wert bedeutet genauere Messung.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 4, 0);
        jPanSerialButtons.add(jSpinPeriod, gridBagConstraints);

        jLabelPeriod2.setText("ms");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 2, 0);
        jPanSerialButtons.add(jLabelPeriod2, gridBagConstraints);

        jLabelHysteresisTime.setText("Hysterese Zeitspanne");
        jLabelHysteresisTime.setToolTipText("<html>Der Zeitabstand zwischen Messpunkten.<br>Kleinerer Wert bedeutet genauere Messung.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanSerialButtons.add(jLabelHysteresisTime, gridBagConstraints);

        jSpinHysteresisTime.setModel(new javax.swing.SpinnerNumberModel(3000, 100, 30000, 100));
        jSpinHysteresisTime.setToolTipText("<html>Der Zeitabstand zwischen Messpunkten.<br>Kleinerer Wert bedeutet genauere Messung.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 4, 0);
        jPanSerialButtons.add(jSpinHysteresisTime, gridBagConstraints);

        jLabelHysteresisTime2.setText("ms");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 2, 0);
        jPanSerialButtons.add(jLabelHysteresisTime2, gridBagConstraints);

        jLabelStartKmh.setText("Startgeschwindigkeit");
        jLabelStartKmh.setToolTipText("<html>Die Messdaten werden erst erfasst wenn<br>diese Geschwindigkeit erreicht wurde<br>Wird nur verwendet falls<br>Motordrehzahl nicht gemessen wird");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanSerialButtons.add(jLabelStartKmh, gridBagConstraints);

        jSpinStartKmh.setModel(new javax.swing.SpinnerNumberModel(10, 1, 100, 1));
        jSpinStartKmh.setToolTipText("<html>Hysterese für die Geschwindigkeit wenn bereit.<br>Der eingestellte Wert gilt für + als auch -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 4, 0);
        jPanSerialButtons.add(jSpinStartKmh, gridBagConstraints);

        jLabelStartKmh2.setText("Km/h");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 2, 0);
        jPanSerialButtons.add(jLabelStartKmh2, gridBagConstraints);

        jLabelIdleRpm.setText("Motordrehzahl wenn bereit");
        jLabelIdleRpm.setToolTipText("<html>Wenn diese Motordrehzahl einige Sekunden konstant bleibt<br>kann die Messung gestartet werden");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanSerialButtons.add(jLabelIdleRpm, gridBagConstraints);

        jSpinIdleRpm.setModel(new javax.swing.SpinnerNumberModel(1600, 100, 20000, 100));
        jSpinIdleRpm.setToolTipText("<html>Wenn diese Motordrehzahl einige Sekunden konstant bleibt<br>kann die Messung gestartet werden");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 4, 0);
        jPanSerialButtons.add(jSpinIdleRpm, gridBagConstraints);

        jLabelIdleRpm2.setText("U/min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 2, 0);
        jPanSerialButtons.add(jLabelIdleRpm2, gridBagConstraints);

        jLabelHysteresisRpm.setText("Hysterese Motordrehzahl +/-");
        jLabelHysteresisRpm.setToolTipText("<html>Hysterese für die Motordrehzahl wenn bereit.<br>Der eingestellte Wert gilt für + als auch -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanSerialButtons.add(jLabelHysteresisRpm, gridBagConstraints);

        jSpinHysteresisRpm.setModel(new javax.swing.SpinnerNumberModel(200, 25, 5000, 50));
        jSpinHysteresisRpm.setToolTipText("<html>Hysterese für die Motordrehzahl wenn bereit.<br>Der eingestellte Wert gilt für + als auch -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 4, 0);
        jPanSerialButtons.add(jSpinHysteresisRpm, gridBagConstraints);

        jLabelHysteresisRpm2.setText("U/min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 2, 0);
        jPanSerialButtons.add(jLabelHysteresisRpm2, gridBagConstraints);

        jLabelStartRpm.setText("Startmotordrehzahl");
        jLabelStartRpm.setToolTipText("<html>Die Messdaten werden erst erfasst wenn<br>diese Motordrehzahl erreicht wurde");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanSerialButtons.add(jLabelStartRpm, gridBagConstraints);

        jSpinStartRpm.setModel(new javax.swing.SpinnerNumberModel(2000, 100, 20000, 100));
        jSpinStartRpm.setToolTipText("<html>Die Messdaten werden erst erfasst wenn<br>diese Motordrehzahl erreicht wurde");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 4, 0);
        jPanSerialButtons.add(jSpinStartRpm, gridBagConstraints);

        jLabelStartRpm2.setText("U/min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 2, 0);
        jPanSerialButtons.add(jLabelStartRpm2, gridBagConstraints);

        jLabelIdleKmh.setText("Geschwindigkeit wenn bereit");
        jLabelIdleKmh.setToolTipText("<html>Wenn diese Geschwindigkeit einige Sekunden konstant bleibt<br>kann die Messung gestartet werden<br>Wird nur verwendet falls<br>Motordrehzahl nicht gemessen wird");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanSerialButtons.add(jLabelIdleKmh, gridBagConstraints);

        jSpinIdleKmh.setModel(new javax.swing.SpinnerNumberModel(4, 1, 100, 1));
        jSpinIdleKmh.setToolTipText("<html>Die Messdaten werden erst erfasst wenn<br>diese Geschwindigkeit erreicht wurde<br>Wird nur verwendet falls<br>Motordrehzahl nicht gemessen wird");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 4, 0);
        jPanSerialButtons.add(jSpinIdleKmh, gridBagConstraints);

        jLabelIdleKmh2.setText("Km/h");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 2, 0);
        jPanSerialButtons.add(jLabelIdleKmh2, gridBagConstraints);

        jLabelHysteresisKmh.setText("Hysterese Geschwindigkeit +/-");
        jLabelHysteresisKmh.setToolTipText("<html>Hysterese für die Geschwindigkeit wenn bereit.<br>Der eingestellte Wert gilt für + als auch -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanSerialButtons.add(jLabelHysteresisKmh, gridBagConstraints);

        jSpinHysteresisKmh.setModel(new javax.swing.SpinnerNumberModel(2, 1, 100, 1));
        jSpinHysteresisKmh.setToolTipText("<html>Wenn diese Geschwindigkeit einige Sekunden konstant bleibt<br>kann die Messung gestartet werden<br>Wird nur verwendet falls<br>Motordrehzahl nicht gemessen wird");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 4, 0);
        jPanSerialButtons.add(jSpinHysteresisKmh, gridBagConstraints);

        jLabelHysteresisKmh2.setText("Km/h");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 2, 0);
        jPanSerialButtons.add(jLabelHysteresisKmh2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        jPanSerial.add(jPanSerialButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanEast.add(jPanSerial, gridBagConstraints);

        jPanMain.add(jPanEast);

        getContentPane().add(jPanMain, java.awt.BorderLayout.CENTER);

        jPanButtons.setLayout(new java.awt.FlowLayout(1, 20, 5));

        jButCancel.setText("Abbrechen");
        jButCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButCancelActionPerformed(evt);
            }
        });
        jPanButtons.add(jButCancel);

        jButConfirm.setText("Übernehmen");
        jButConfirm.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButConfirmActionPerformed(evt);
            }
        });
        jPanButtons.add(jButConfirm);

        getContentPane().add(jPanButtons, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jButCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButCancelActionPerformed
    {//GEN-HEADEREND:event_jButCancelActionPerformed
      settingsChanged = false;
      dispose();
    }//GEN-LAST:event_jButCancelActionPerformed

    private void jButConfirmActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButConfirmActionPerformed
    {//GEN-HEADEREND:event_jButConfirmActionPerformed
      confirm();
    }//GEN-LAST:event_jButConfirmActionPerformed

  private void jTextFieldInertiaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextFieldInertiaActionPerformed
  {//GEN-HEADEREND:event_jTextFieldInertiaActionPerformed

  }//GEN-LAST:event_jTextFieldInertiaActionPerformed

  private void jHeightActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jHeightActionPerformed
  {//GEN-HEADEREND:event_jHeightActionPerformed

  }//GEN-LAST:event_jHeightActionPerformed

  private void jWidthActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jWidthActionPerformed
  {//GEN-HEADEREND:event_jWidthActionPerformed

  }//GEN-LAST:event_jWidthActionPerformed

  private void jPNGResolutionComboActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPNGResolutionComboActionPerformed
  {//GEN-HEADEREND:event_jPNGResolutionComboActionPerformed

  }//GEN-LAST:event_jPNGResolutionComboActionPerformed

  /*---PUBLIC METHODS----------------------------*/
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the system look and feel */

    try
    {
      javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
    }
    catch (ClassNotFoundException
           | InstantiationException
           | IllegalAccessException
           | javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(ProgSetDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(()
            ->
    {
      ProgSetDialog dialog = new ProgSetDialog(new javax.swing.JFrame(), true);
      dialog.addWindowListener(new java.awt.event.WindowAdapter()
      {

        @Override
        public void windowClosing(java.awt.event.WindowEvent e)
        {
          System.exit(0);
        }

      });
      dialog.setVisible(true);
    });
  }

  /**
   * Sets the given/default values.<br>
   * Then calls the super method.
   *
   * @param b
   */
  @Override
  public void setVisible(boolean b)
  {
    if(b)
    {
      settingsChanged = false;
      //PNG RESOLUTION

      jButRadioPng.setSelected(!customRes);
      jButRadioPngCustom.setSelected(customRes);

      jWidth.setEnabled(customRes);
      jHeight.setEnabled(customRes);

      if(resIndex == -1)
        jPNGResolutionCombo.setSelectedIndex(1);

      jPNGResolutionCombo.setEnabled(!customRes);

      jWidth.setText(String.valueOf(customWidth));
      jHeight.setText(String.valueOf(customHeight));

      //POWERUNIT
      jButRadioUnitPS.setSelected(powerunitPS);
      jButRadioUnitkW.setSelected(!powerunitPS);

      //CORRECTION
      jSpinCorrectPower.setValue(correctionPower);
      jSpinCorrectTorque.setValue(correctionTorque);

      //INERTIA
      jTextFieldInertia.setText(String.format("%.4f", inertia));

      //COMMUNICATION
      jSpinPeriod.setValue(periodTimeMs);
      jSpinStartRpm.setValue(startRpm);
      jSpinStartKmh.setValue(startKmh);
      jSpinIdleRpm.setValue(idleRpm);
      jSpinIdleKmh.setValue(idleKmh);
      jSpinHysteresisRpm.setValue(hysteresisRpm);
      jSpinHysteresisKmh.setValue(hysteresisKmh);
      jSpinHysteresisTime.setValue(hysteresisTime);

    }

    super.setVisible(b);
  }

  /**
   * Checks the selected dimension and returns it.
   *
   * @return The Dimension
   */
  public Dimension getPNGResolution()
  {
    Dimension dimension = new Dimension();

    switch (resIndex)
    {
      case -1:
        dimension.width = customWidth;
        dimension.height = customHeight;
        break;
      case 0:
        dimension.width = 640;
        dimension.height = 480;
        break;
      case 1:
        dimension.width = 800;
        dimension.height = 600;
        break;
      case 2:
        dimension.width = 1280;
        dimension.height = 720;
        break;
      case 3:
        dimension.width = 1920;
        dimension.height = 1080;
        break;
      default:
        JOptionPane.showMessageDialog(this,
                                      "Fehler bei Auflösung!",
                                      "Fehler",
                                      JOptionPane.ERROR_MESSAGE);
    }

    return dimension;
  }

  /**
   * @return the powerunit
   */
  public String getPowerunit()
  {
    if(powerunitPS)
      return "PS";
    else
      return "kW";
  }

  /**
   * @return the correction factor for the power series
   */
  public double getCorrectionPower()
  {
    return correctionPower;
  }

  /**
   * @return the correction factor for the torque series
   */
  public double getCorrectionTorque()
  {
    return correctionTorque;
  }

  /**
   * @return true if the setting is changed
   */
  public boolean isSettingsChanged()
  {
    return settingsChanged;
  }

  /**
   * @return the inertia
   */
  public double getInertia()
  {
    return inertia;
  }

  /**
   * @return the period between datapoint captures
   */
  public int getPeriodTimeMs()
  {
    return periodTimeMs;
  }

  public int getStartRpm()
  {
    return startRpm;
  }

  public int getIdleKmh()
  {
    return idleKmh;
  }

  public int getHysteresisKmh()
  {
    return hysteresisKmh;
  }

  public int getHysteresisTime()
  {
    return hysteresisTime;
  }

  public int getStartKmh()
  {
    return startKmh;
  }

  public int getIdleRpm()
  {
    return idleRpm;
  }

  public int getHysteresisRpm()
  {
    return hysteresisRpm;
  }

  /*---PRIVATE METHODS-------------------------------------*/
  /**
   * Checks if all the values are correct and saves the changed values. Then
   * disposes the frame.
   */
  private void confirm()
  {
    //PNG RESOLUTION
    customRes = jButRadioPngCustom.isSelected();
    boolean error = false;

    int tempW;
    int tempH;
    if(customRes)
    {
      resIndex = -1;
      try
      {
        tempW = Integer.parseInt(jWidth.getText());
        tempH = Integer.parseInt(jHeight.getText());
        if(tempW < 400 || tempH < 200)
          throw new IllegalArgumentException();
        else
        {
          customWidth = tempW;
          customHeight = tempH;
        }
      }
      catch (NumberFormatException ex)
      {
        error = true;
        LOG.warning("Invalid Resolution", ex);
        JOptionPane.showMessageDialog(this, jWidth.getText()
                                      + " x "
                                      + jHeight.getText()
                                      + " ist keine gültige Auflösung!",
                                      "Keine gültige Auflösung!", JOptionPane.ERROR_MESSAGE);
      }
      catch (IllegalArgumentException ex)
      {
        error = true;
        LOG.warning("Resolution too small(min 400x200)", ex);
        JOptionPane.showMessageDialog(this, jWidth.getText()
                                      + " x "
                                      + jHeight.getText()
                                      + " ist keine gültige Auflösung! \n"
                                      + " Auflösung mindestens 400x200!",
                                      "Keine gültige Auflösung!",
                                      JOptionPane.ERROR_MESSAGE);
      }
      catch (Exception ex)
      {
        error = true;
        LOG.severe("Unsupported Exception", ex);
        JOptionPane.showMessageDialog(this,
                                      "Unbekannter Fehler aufgetreten.\n" + ex.toString(),
                                      "Unbekannter Fehler",
                                      JOptionPane.ERROR_MESSAGE);
      }

    }
    else
      resIndex = jPNGResolutionCombo.getSelectedIndex();

    //POWERUNIT
    if(jButRadioUnitPS.isSelected())
      powerunitPS = true;
    else if(jButRadioUnitkW.isSelected())
      powerunitPS = false;
    else
    {
      error = true;
      JOptionPane.showMessageDialog(this,
                                    "Fehler bei der Leistungseinheit!",
                                    "Fehler Leistungseinheit!",
                                    JOptionPane.ERROR_MESSAGE);
    }

    //CORRECTION
    correctionPower = (double) jSpinCorrectPower.getValue();
    correctionTorque = (double) jSpinCorrectTorque.getValue();

    //INERTIA
    try
    {
      double tmp = Double.parseDouble(jTextFieldInertia.getText().replaceAll(",", "."));
      if(tmp < 0.5 || tmp > 5.0)
        throw new NumberFormatException();
      inertia = tmp;
    }
    catch (NumberFormatException | NullPointerException ex)
    {
      error = true;
      LOG.warning("Inertia too small/big (0.5 - 5.0)", ex);
      JOptionPane.showMessageDialog(this,
                                    "Fehler bei Trägheitsmoment! \n"
                                    + "Wert mussen zwischen 0,5 und 5,0 liegen.",
                                    "Fehler Trägheitsmoment!",
                                    JOptionPane.ERROR_MESSAGE);
    }
    catch (Exception ex)
    {
      error = true;
      LOG.severe("Unsupported Exception", ex);
      JOptionPane.showMessageDialog(this,
                                    "Unbekannter Fehler aufgetreten\n" + ex.toString(),
                                    "Unbekannter Fehler",
                                    JOptionPane.ERROR_MESSAGE);
    }

    //SERIALPORT
    periodTimeMs = (int) jSpinPeriod.getValue();
    startRpm = (int) jSpinStartRpm.getValue();
    startKmh = (int) jSpinStartKmh.getValue();
    idleRpm = (int) jSpinIdleRpm.getValue();
    idleKmh = (int) jSpinIdleKmh.getValue();
    hysteresisRpm = (int) jSpinHysteresisRpm.getValue();
    hysteresisKmh = (int) jSpinHysteresisKmh.getValue();
    hysteresisTime = (int) jSpinHysteresisTime.getValue();

    if(!error)
    {
      settingsChanged = true;
      dispose();
    }
  }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButCancel;
    private javax.swing.JButton jButConfirm;
    private javax.swing.JRadioButton jButRadioPng;
    private javax.swing.JRadioButton jButRadioPngCustom;
    private javax.swing.JRadioButton jButRadioUnitPS;
    private javax.swing.JRadioButton jButRadioUnitkW;
    private javax.swing.JTextField jHeight;
    private javax.swing.JLabel jLabelHysteresisKmh;
    private javax.swing.JLabel jLabelHysteresisKmh2;
    private javax.swing.JLabel jLabelHysteresisRpm;
    private javax.swing.JLabel jLabelHysteresisRpm2;
    private javax.swing.JLabel jLabelHysteresisTime;
    private javax.swing.JLabel jLabelHysteresisTime2;
    private javax.swing.JLabel jLabelIdleKmh;
    private javax.swing.JLabel jLabelIdleKmh2;
    private javax.swing.JLabel jLabelIdleRpm;
    private javax.swing.JLabel jLabelIdleRpm2;
    private javax.swing.JLabel jLabelInertia;
    private javax.swing.JLabel jLabelInertia2;
    private javax.swing.JLabel jLabelPeriod;
    private javax.swing.JLabel jLabelPeriod2;
    private javax.swing.JLabel jLabelPower;
    private javax.swing.JLabel jLabelStartKmh;
    private javax.swing.JLabel jLabelStartKmh2;
    private javax.swing.JLabel jLabelStartRpm;
    private javax.swing.JLabel jLabelStartRpm2;
    private javax.swing.JLabel jLabelTorque;
    private javax.swing.JLabel jLabelX;
    private javax.swing.JComboBox jPNGResolutionCombo;
    private javax.swing.JPanel jPanButtons;
    private javax.swing.JPanel jPanCorrection;
    private javax.swing.JPanel jPanCorrectionButtons;
    private javax.swing.JPanel jPanEast;
    private javax.swing.JPanel jPanMain;
    private javax.swing.JPanel jPanPNG;
    private javax.swing.JPanel jPanPNGButtons;
    private javax.swing.JPanel jPanPNGCustom;
    private javax.swing.JPanel jPanPower;
    private javax.swing.JPanel jPanPowerButtons;
    private javax.swing.JPanel jPanSerial;
    private javax.swing.JPanel jPanSerialButtons;
    private javax.swing.JPanel jPanWest;
    private javax.swing.JSpinner jSpinCorrectPower;
    private javax.swing.JSpinner jSpinCorrectTorque;
    private javax.swing.JSpinner jSpinHysteresisKmh;
    private javax.swing.JSpinner jSpinHysteresisRpm;
    private javax.swing.JSpinner jSpinHysteresisTime;
    private javax.swing.JSpinner jSpinIdleKmh;
    private javax.swing.JSpinner jSpinIdleRpm;
    private javax.swing.JSpinner jSpinPeriod;
    private javax.swing.JSpinner jSpinStartKmh;
    private javax.swing.JSpinner jSpinStartRpm;
    private javax.swing.JTextField jTextFieldInertia;
    private javax.swing.JTextField jWidth;
    private javax.swing.ButtonGroup powerunitGroup;
    private javax.swing.ButtonGroup resolutionGroup;
    // End of variables declaration//GEN-END:variables

}
